                            ASSIGNMENT-1

MongoDB Exercise in mongo shell
Connect to a running mongo instance, use a database named mongo_practice.
Document all your queries in a javascript file to use as a reference.
Insert Documents
Insert the following documents into a movies collection. title : Fight Club
 writer : Chuck Palahniuko
 year : 1999                     actors : [ Brad Pitt Edward Norton ] 
title : Pulp Fiction             writer : Quentin Tarantino
 year : 1994                     actors : [ John Travolta Uma Thurman ]
 title : Inglorious Basterds     writer : Quentin Tarantino  
year : 2009                      actors : [ Brad Pitt Diane Kruger Eli Roth ] 
title : The Hobbit: An Unexpected Journey     writer : J.R.R. Tolkein
 year : 2012                     franchise : The Hobbit
 title : The Hobbit: The Desolation of Smaug              writer : J.R.R. Tolkein
year : 2013                      franchise : The Hobbit 
title : The Hobbit: The Battle of the Five Armies          writer : J.R.R. Tolkein
 year : 2012                     franchise : The Hobbit 
synopsis : Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness. title : Pee Wee Herman's Big Adventure title : Avatar Reference https://www.tutorialspoint.com/mongodb/mongodb_insert_document.htm
Query / Find Documents
query the movies collection to
1. get all documents
A.db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"
A.db.movies.find({writer:"Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt"
A.db.movies.find({actor:"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit"
A.db.movies.find({franchise:"The Hobbit"})

5. get all movies released in the 90s
A.db.movies.find({$and:[{year:{$gt:1900}},{year:{$lt:2000}}]})

6. get all movies released before the year 2000 or after 2010
A.db.movies.find({$or:[{year:{$gt:2000}},{year:{$lt:2010}}]})

Reference: https://www.tutorialspoint.com/mongodb/mongodb_query_document.htm
Update Documents
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
A.db.movies.update({title:"The Hobbit: An Unexpected Journey" },{$set:{synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
A.db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
A.db.movies.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L Jackson"}})
AFTER UPDATING WE CAN SEE THE UPDATED VALUE BY QUERY DB.MOVIES.FIND()

Reference: https://www.tutorialspoint.com/mongodb/mongodb_update_document.htm
Text Search
1. find all movies that have a synopsis that contains the word "Bilbo"
db.movies.createIndex({synopsis:"text"})
A.db.movies.find({$text:{$search:"Bilbo"}}).pretty()

2. find all movies that have a synopsis that contains the word "Gandalf"
A.db.movies.find({$text:{$search:"Gandalf"}}).pretty()

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
A.db.movies.find({$text:{$search:"Bilbo -Gandalf"}})
db.movies.find({$and:[{synopsis:/Bilbo/g},{synopsis:{$not:/Gandalf/g}}]}).pretty()

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
A.db.movies.find({$text:{$search:"dwarves hobbit"}}).pretty()

5. find all movies that have a synopsis that contains the word "gold" and "dragon"
A.db.movies.find({$and:[{synopsis:/gold/g},{synopsis:/dragon/g}]}).pretty()

Reference: https://www.tutorialspoint.com/mongodb/mongodb_text_search.htm

Delete Documents
1. delete the movie "Pee Wee Herman's Big Adventure"
A.db.movies.deleteOne({title:"Pee Wee Herman's Big Adventure"})

2. delete the movie "Avatar"
A.db.movies.deleteOne({title:"Avatar"})

Reference: https://www.tutorialspoint.com/mongodb/mongodb_delete_document.htm
Relationships
Insert the following documents into a users collection username : GoodGuyGreg first_name : "Good Guy" last_name : "Greg" username : ScumbagSteve full_name : first : "Scumbag" last : "Steve"
Insert the following documents into a posts collection username : GoodGuyGreg title : Passes out at party body : Wakes up early and cleans house
username : GoodGuyGreg title : Steals your identity body : Raises your credit score username : GoodGuyGreg title : Reports a bug in your code body : Sends you a Pull Request username : ScumbagSteve title : Borrows something body : Sells it username : ScumbagSteve title : Borrows everything body : The end username : ScumbagSteve title : Forks your repo on github body : Sets to private
Insert the following documents into a comments collection
username : GoodGuyGreg comment : Hope you got a good deal! post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"
username : GoodGuyGreg comment : What's mine is yours! post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"
username : GoodGuyGreg comment : Don't violate the licensing agreement! post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github
username : ScumbagSteve comment : It still isn't clean post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"
username : ScumbagSteve comment : Denied your PR cause I found a hack post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"
Querying related collections
1. find all users
A.db.users.find().pretty();

2. find all posts
A.db.posts.find().pretty();

3. find all posts that was authored by "GoodGuyGreg"
A.db.posts.find({username:'GoodGuyGreg'}).pretty();

4. find all posts that was authored by "ScumbagSteve"
A.db.posts.find({username:'ScrumbagSteve'}).pretty();

5. find all comments
A.db.comments.find().pretty();

6. find all comments that was authored by "GoodGuyGreg"
A.db.comments.find({username:'GoodGuyGreg'}).pretty();

7. find all comments that was authored by "ScumbagSteve"
A.db.posts.find({username:'Scrumbagsteve'}).pretty();

8. find all comments belonging to the post "Reports a bug in your code"
A.db.posts.aggregate([
{
$match:{title:'Reports a bug in your code'}
},
$lookup:{
from:'comments',
localField:'_id',
foreignField:'post',
as:'comments'
}
}
]).pretty();

References: https://docs.mongodb.com/manual/reference/method/db.collection.find/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



                                         ASSIGNMENT-2
MongoDB -Aggregation Exercises
Import the zips.json file into your MongoDB. Database name is "population" and collection name is "zipcodes".
mongoimport --db population --collection zipcodes --file zips.json
Atlanta Population
1. use db.zipcodes.find() to filter results to only the results where city is ATLANTA and state is GA.
A.db.zipcodes.find({city:"ATLANTA",state:"GA"})

2. use db.zipcodes.aggregate with $match to do the same as above.
A.db.zipcodes.aggregrate([{$match:{city:"ATLANTA",state:"GA"}}])

3. use $group to count the number of zip codes in Atlanta.
A.db.zipcodes.aggregate([{$group:{_id:"$city"}},{$count:"ATLANTA"}])

4. use $group to find the total population in Atlanta.
A.db.zipcodes.aggregate( [{ $group: { _id: "$ATLANTA", totalPop: { $sum: "$pop" } } }])

Populations By State
1. use aggregate to calculate the total population for each state
A.db.zipcodes.aggregate( [{ $group: { _id: "$state", totalPop: {$sum: "$pop" } }}])

2. sort the results by population, highest first
A.db.zipcodes.aggregate([{$sort:{pop:-1}}])

3. limit the results to just the first 3 results. What are the top 3 states in population?
A.db.zipcodes.aggregate([{$sort:{pop:-1}},{$limit:3}])

Populations by City
1. use aggregate to calculate the total population for each city (you have to use city/state combination). You can use a combination for the _id of the $group: { city: '$city', state: '$state' }
A.db.zipcodes.aggregate( [{ $group: { _id: "$state", totalPop: {$sum: "$pop" } }}])

2. sort the results by population, highest first
A.db.zipcodes.aggregate([{$sort:{pop:-1}}])

3. limit the results to just the first 3 results. What are the top 3 cities in population?
A.db.zipcodes.aggregate([{$sort:{pop:-1}},{$limit:3}])

4. What are the top 3 cities in population in Texas?
A.db.zipcodes.aggregate([{$sort:{pop:-1}},{$limit:3}])

Bonus
1. Write a query to get the average city population for each state.
A.db.zipcodes.aggregate( [
   { $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },
   { $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } }
] )
2. What are the top 3 states in terms of average city population
A.db.zipcodes.aggregate( [
   { $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },
   { $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } },{$sort:{pop:-1}},{$limit:3}}
] )
                                 ASSIGNMENT-3
Mongo DB Exercises - With the Restaurants Data Set
1. Download the restaurants.zip file
2. Unzip the file, you will see restaurants.json file
3. Run the mongod server
4. Run the following command to import the json file provided. It will load the json file into the mongodb with database name - restaurants, collections name - addresses
mongoimport --db restaurants --collection addresses --file restaurants.json
5. Run mongo shell command
6. show databases
7. use restaurants
8. db.addresses.find() should print entire json data
9. Then start working on the following exercises and submit your queries as the answers to the questions
Query Reference Links and Cheat sheets
1. https://docs.mongodb.com/manual/crud/
Exercise Questions
1. Write a MongoDB query to display all the documents in the collection restaurants.
A.db.addresses.find()

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
A.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
A.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1,"_id":0});

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
A.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1,"_id":0});

5. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
A.db.addresses.find({"borough": "Bronx"});

6. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
A.db.addresses.find({"borough": "Bronx"}).limit(5);

7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
A.db.addresses.find({"borough": "Bronx"}).skip(5).limit(5);

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
A.db.addresses.find({grades : { $elemMatch:{"score":{$gt : 90}}}});

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
A.db.addresses.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}});

10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
A.db.addresses.find({"address.coord" : {$lt : -95.754168}});

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
A.db.addresses.find(
               {$and:
                    [
                       {"cuisine" : {$ne :"American "}},
                       {"grades.score" : {$gt : 70}},
                       {"address.coord" : {$lt : -65.754168}}
                    ]
                }
                    );

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
A.db.addresses.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "grades.score" :{$gt: 70},
                             "address.coord" : {$lt : -65.754168}
                            }
                     );

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
A.db.addresses.find( {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough": {$ne : "Brooklyn"}
                       } 
                    ).sort({"cuisine":-1});


14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
A.db.addresses.find(
{name: /^Wil/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);


15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
A.db.addresses.find(
{name: /ces$/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
A.db.addresses.find(
{"name": /.*Reg.*/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);


17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
Adb.addresses.find(
{ 
"borough": "Bronx" , 
$or : [
{ "cuisine" : "American " },
{ "cuisine" : "Chinese" }
] 
} 
);
.
18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
A.db.addresses.find(
{"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
A.db.addresses.find(
{"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
A.db.addresses.find(
{"grades.score" : 
{ $not: 
{$gt : 10}
}
},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
A.db.addresses.find(
{$or: [
  {name: /^Wil/}, 
  {"$and": [
       {"cuisine" : {$ne :"American "}}, 
       {"cuisine" : {$ne :"Chinees"}}
   ]}
]}
,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
);

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..
A.db.addresses.find( 
                {
                 "grades.date": ISODate("2014-08-11T00:00:00Z"), 
                 "grades.grade":"A" , 
                 "grades.score" : 11
                }, 
                {"restaurant_id" : 1,"name":1,"grades":1}
             );


23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z"
A.db.addresses.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   );

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..
A.db.addresses.find( 
                      { 
                        "address.coord.1": {$gt : 42, $lte : 52}
                      },
                        {"restaurant_id" : 1,"name":1,"address":1,"coord":1}
                   );

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
A.db.addresses.find().sort({"name":1});

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
A.db.addresses.find().sort(
                          {"name":-1}
                          );

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
A.db.addresses.find().sort(
                           {"cuisine":1,"borough" : -1,}
                          );

28. Write a MongoDB query to know whether all the addresses contains the street or not.
A.db.addresses.find(
                     {"address.street" : 
                         { $exists : true } 
                     } 
                   );

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
A.db.addresses.find(
                    {"address.coord" : 
                       {$type : 1}
                    }
                   );

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
A.db.addresses.find(
                      {"grades.score" :
                         {$mod : [7,0]}
                      },
                         {"restaurant_id" : 1,"name":1,"grades":1}
                    );

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
A.db.addresses.find(
                   { name : 
                     { $regex : "mon.*", $options: "i" } 
                   },
                       {
                         "name":1,
                         "borough":1,
                         "address.coord":1,
                         "cuisine" :1
                        }
                   );

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
A.db.addresses.find(
                   { name : 
                     { $regex : /^Mad/i, } 
                   },
                       {
                         "name":1,
                         "borough":1,
                         "address.coord":1,
                         "cuisine" :1
                        }
                   );


Happy Coding!!!