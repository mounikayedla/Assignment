Install GIT & make sure it is added into PATH.

Section 0 -Use GIT as local VCS. Steps to follow:

1. Create a directory ‘project_dir’ & cd to ‘project_dir’.
A.mkdir project_dir
  cd project_dir

2. Initialize git version database. (git init)
A.git init :Initialized empty git repository in specified drive location.

3. Create a new file index.html.
A.we create index.html file while in notepad.

4. Check the git status. You should find index.html as untracked file.
A.yes,while we check git status we got like this,
on branch master
no commits yet
untracked file:
(use "git add <file>..."to include in what will be commited)
index.html
nothing added to commit but untracked files present (use "git add"to track)

5. Stage the index.html file.
A.git add index.html or you can add directly in git repository file.

6. Commit index.html
A.git commit -m "To commit the file"

7. Make few changes in index.html & create a new file info.txt
A.By using commit command few changes made 
1 file changed,0 insertions (+),0 deletions(-)
create mode 100644 new.txt

8. Check git status. You should find index.html & info.txt as untracked files.
A.on branch master 
nothing to commit , working tree clean

9. Configure GIT to ignore all txt files.
A.git config --global user.username (github username)

10. Again check the git status. You should find only index.html as untracked file.
A.on branch master 
nothing to commit,working tree clean

11. State & commit index.html
A.git add index.html
git commit -m "To commit the file"

12. Log all your comments so far.
A.git log --oneline
author:our username with mail
date:current date
to commit the file

13. Make some changes in index.html.
A.git commit -m "To commit the file"

14. Revert the change made in the previous step using git command.
A. git revert  HEAD
 Revert "to commit the file"
this reverts commit 
# please enter the commit message for your changes lines starting
#with '#'will be ignored,and an empty message aborts the commit.
#on branch mastergi
#changes to be committed:
#     deleted:new.txt

15. Again change index.html.
A.git commit command

16. Stage index.html
A.git status and git add command.

17. Revert back the last stage.
A.git revert --abort or using reset command

18. Rename ‘add’ command to ‘my-add’.
A.git config --global alias.my-add add
 
19. Using my_add command Stage index.html again & commit the changes.
A.git my_add index.html
  git commit --m "text message"

20. Revert the last commit.
A.git commit --amend-m "corrected message"

GIT Branching

Objective: Commit HTML, CSS & JavaScript assignments into GIT.

SECTION-1 (HTML assignments) - Steps to follow:

21. First take a backup of your assignments & projects. This is required because due to incorrect GIT operation you may lose your files.
A.

22. Create an empty directory ‘Assignments’ & cd to ‘Assignments’.
A.mkdir Assignments
  cd Assignments

23. Create a file README.txt inside ‘Assignments’ & write few lines about the contents of ‘Assignments’ folder.
A.create A text file README

24. Commit README.txt file.
A.git commit --m "message"

25. Now create a new branch ‘html-assignments’.
A.git checkout -b html-assignments
26. Switch to ‘html-assignments’ branch.
A.Once we create new branch it switch to html-assignments

27. Copy all HTML assignments inside ‘Assignments’ folder.
A.Copy  the all html codes
28. Commit HTML assignments into ‘html-assignments’ branch.
A.git add --all
git commit -m "text message"

29. Make minor changes into few files belonging to ‘html-assignments’ branch.
A.git add command

30. Commit those changed files.
A.git commit command

31. Switch to master branch.
A.git switch master command is used.
 
32. Make minor changes into README.txt file & commit those changes into master.
A.git add README.txt
  git commit -a ,git commit -m "text message"

33. Again switch to ‘html-assignments’ branch.
A. git switch html-assignments.

34. Make minor changes into few files belonging to ‘html-assignments’ branch.
A.git add command
35. Commit those changes.
A. git commit command.
36. Switch to master.
A.git switch master

37. Merge ‘html-assignments’ branch into master. Confirm all html assignments are shown in master.
A.git merge html-assignments .

38. Finally delete the ‘html-assignments’ branch.
A.git branch -d html-assignments

SECTION-2 - (CSS assignments) Steps to follow:

1. Create a new branch ‘css-assignments’.
A. git checkout -b css-assignments.

2. Switch to ‘css-assignments’ branch.
A.git switch css-assignments

3. Copy all CSS assignments inside ‘Assignments’ folder.
A.Copy the all css  files

4. Commit CSS assignments into ‘css-assignments’ branch.
A.git add --all
  git commit -m "text message"

5. Make minor changes into README.txt file on line 1 belonging to ‘css-assignments’ branch.
A.git add.
  
6. Commit those changed files.
A.git commit -m "text message"

7. Switch to master branch.
A.git switch master.

8. Make minor changes into README.txt file on line 3 & commit those changes into master.
A.git add.

9. Again switch to ‘css-assignments’ branch.
A.git switch css-assignments.

10. Make minor changes into few files belonging to ‘css-assignments’ branch.
A.git add file names

11. Commit those changes.
A. git commit -m "changes done".

12. Switch to master.
A.git switch master.

13. Merge ‘css-assignments’ branch into master. Confirm all css assignments are shown in master.
A.git merge css-assignments

14. Finally delete the ‘css-assignments’ branch.
A.git branch -d css-assignments

SECTION-3 - (JavaScript assignments) Steps to follow:

1. Create a new branch ‘js-assignments’.
A.git checkout -b js-assignments

2. Switch to ‘js-assignments’ branch.
A.once checkout command executed automatically switch to js-assignments

3. Copy all JavaScript assignments inside ‘Assignments’ folder.
A.Create js files and copy those files into js-assignments

4. Commit JavaScript assignments into ‘js-assignments’ branch.
A.git add.
 git commit -m "text message"
  
5. Make minor changes into README.txt file on line 1 belonging to ‘js-assignments’ branch.
A.git add.
git commit
6. Commit those changed files.
A.git commit -m "made changes"

7. Switch to master branch.
A.git switch master

8. Make minor changes into README.txt file on line 1 & commit those changes into master.
A.git add.
  git commit -m "text changes"

9. Again switch to ‘js-assignments’ branch.
A.git switch js-assignments

10. Make minor changes into few files belonging to ‘js-assignments’ branch.
A.git add file name

11. Commit those changes.
A.git commit -m "changes made"

12. Switch to master.
A. git switch master

13. Merge ‘js-assignments’ branch into master. Confirm all JavaScript assignments are shown in master.
A.git merge js-assignments

14. Finally delete the ‘js-assignments’ branch.
A.git branch -d js-assignments
GIT Remoting

Objective: Pushing source code into GITHUB & collaborate team members.

SECTION-3 (Pushing assignments to remote repository) - Steps to follow:

39. Create a github account if you do not have already.
A.To create an account we need to give our email,username,and password.

40. Login on into github account.
A.once the account created log in as by giving username/email and password

41. Create new public repository ‘freshersbatch-oct16’.
A. we have a option in account to create repository

42. Commit & push any sample file to this repository under ‘Assignments’ directory.
A.mkdir Assignments
  git init
  git add <filename>
  git commit -m "text message"
  git config -global user.username <username>
  git remote add origin <repository url>
git push -u origin master

SECTION-4 (Pushing source code to remote repository using Eclipse GIT plugin) - Steps to follow:

1. One developer from project team will create eclipse projects ‘SampleProj’ & add sample source code files. Then commit all files through eclipse GIT plugin.
A.open eclipse IDE then shift to git repository
  select add on existing local repository
  select to clone a repository and enter our github url.
  and finsish.

2. Collaborate other team members with your github account so that they can also modify the committed files.

3. Other developers from same team will checkout all files from remote repository. This might get conflicts since certain files fail to merge. In such case, merge it manually.

4. Commit & push the ‘SampleProj’ 
A.right click on project and select commit 
 -> we can git staging view then select commit
 ->then right click on the project and select team
 -> in that team menu select push brach master.
